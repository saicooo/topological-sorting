import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.NoSuchElementException;

public class Main {
    private static final String GREEN = "\u001B[32m";
    private static final String RED = "\u001B[31m";
    private static final String CYAN = "\u001B[36m";
    private static final String YELLOW = "\u001B[33m";
    private static final String BLUE = "\u001B[34m";
    private static final String RESET = "\u001B[0m";

    public static void main(String[] args) {
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if (args.length == 0) {
                System.out.println(YELLOW + "‚Ñπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: java Main <–ø—É—Ç—å-–∫-json-—Ñ–∞–π–ª—É>" + RESET);
                System.out.println(YELLOW + "–ü—Ä–∏–º–µ—Ä: java Main data/graph.json" + RESET);
                return;
            }

            // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞
            Path jsonPath = Paths.get(args[0]);
            System.out.println(CYAN + "üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞: " + jsonPath.getFileName() + RESET);
            
            Graph graph = GraphParser.parseFromFile(jsonPath);
            System.out.println(GREEN + "‚úÖ –ì—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!" + RESET);

            // 3. –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä–∞—Ñ–µ
            printGraphDetails(graph);
            
            // 4. –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            processTopologicalSorting(graph);
            
        } catch (Exception e) {
            System.err.println(RED + "\n‚õî –û—à–∏–±–∫–∞: " + e.getMessage() + RESET);
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void printGraphDetails(Graph graph) {
        System.out.println("\nüìä –î–µ—Ç–∞–ª–∏ –≥—Ä–∞—Ñ–∞:");
        System.out.println("‚îú‚îÄ –í—Å–µ–≥–æ –≤–µ—Ä—à–∏–Ω: " + graph.getVertices().size());
        System.out.println("‚îú‚îÄ –í—Å–µ–≥–æ —Ä—ë–±–µ—Ä: " + countEdges(graph));
        System.out.println("‚îî‚îÄ –°–ø–∏—Å–æ–∫ –≤–µ—Ä—à–∏–Ω:");
        
        for (Vertex v : graph.getVertices()) {
            System.out.printf("   ‚îú‚îÄ %s%s%s [%d, %d] ‚Üí –°–æ—Å–µ–¥–∏: %s%n", 
                    YELLOW, v.getName(), RESET, 
                    v.getX(), v.getY(),
                    formatNeighbors(v));
        }
    }
    
    private static int countEdges(Graph graph) {
        int count = 0;
        for (Vertex v : graph.getVertices()) {
            count += v.getNeighbors().size();
        }
        return count;
    }
    
    private static String formatNeighbors(Vertex vertex) {
        StringBuilder sb = new StringBuilder();
        for (Vertex neighbor : vertex.getNeighbors()) {
            if (sb.length() > 0) sb.append(", ");
            sb.append(neighbor.getName());
        }
        return sb.length() > 0 ? sb.toString() : "–Ω–µ—Ç";
    }

    private static void processTopologicalSorting(Graph graph) {
        TopologicalSorter sorter = new TopologicalSorter(graph);
        
        System.out.println("\n" + BLUE + "üîÑ –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞" + RESET);
        System.out.println(GREEN + "‚Üí –®–∞–≥–∏ –≤–ø–µ—Ä–µ–¥:" + RESET);
        
        // –®–∞–≥–∏ –≤–ø–µ—Ä–µ–¥
        int step = 1;
        while (sorter.hasNext()) {
            Vertex current = sorter.next();
            List<Vertex> sorted = sorter.getSortedSoFar();
            System.out.printf("%d. –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞: %s%s%s | –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫: %s%n", 
                    step++, 
                    GREEN, current.getName(), RESET,
                    formatOrder(sorted));
        }
        
        // –®–∞–≥–∏ –Ω–∞–∑–∞–¥
        System.out.println(RED + "\n‚Üê –®–∞–≥–∏ –Ω–∞–∑–∞–¥:" + RESET);
        try {
            int backStep = 1;
            while (!sorter.getSortedSoFar().isEmpty()) {
                Vertex prev = sorter.prev();
                List<Vertex> sorted = sorter.getSortedSoFar();
                System.out.printf("%d. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞: %s%s%s | –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫: %s%n", 
                        backStep++,
                        RED, prev.getName(), RESET,
                        formatOrder(sorted));
            }
            System.out.println(GREEN + "‚úì –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" + RESET);
        } catch (NoSuchElementException e) {
            System.out.println(RED + "‚úó –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: " + e.getMessage() + RESET);
        }
        
        System.out.println(GREEN + "\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!" + RESET);
    }
    
    private static String formatOrder(List<Vertex> vertices) {
        StringBuilder sb = new StringBuilder();
        for (Vertex v : vertices) {
            if (sb.length() > 0) sb.append(" ‚Üí ");
            sb.append(v.getName());
        }
        return sb.length() > 0 ? sb.toString() : "–ø—É—Å—Ç–æ";
    }
}